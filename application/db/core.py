from sqlalchemy.ext.declarative.api import DeclarativeMeta
from collections import namedtuple
import pickle


def write_credentials(filename: str, user: str, password: str):
    """
    Creates a credentials file containing the username and password for the database.

    :param filename:
    :param user:
    :param password:
    """

    creds = {"user": user, "pass": password}
    pickle.dump(creds, open(filename, 'wb'))


def read_credentials(filename):
    """
    Reads in the database credentials from a file generated by write_credentials().

    :param filename: Filename of the pickled credentials.

    :return: Dictionary containing two fields
             1. "user"
             2. "pass"
    """

    return pickle.load(open(filename, 'rb'))


def restify_keyedtuple(nt: list) -> list:
    """
    Converts a list of namedtuples into a list of ordered dictionaries.  This is done to easily plug the search results
    into a flask-restful resource.

    :param nt:
    :return:
    """

    dict_list = list()

    for r in nt:
        dict_list.append(r._asdict())

    return dict_list


def list_table_columns(table_name: DeclarativeMeta) -> list:
    """
    Returns the list of columns defined in a class inheriting from the declarative base used to define the database
    tables.  More simply, lists all the column names that you define in the class that don't being with '_'.

    :param table_name:
    :return:
    """

    columns = list()

    for column_name in table_name.__dict__.keys():
        if not column_name.startswith('_'):
            columns.append(column_name)

    return columns


# Below are the various nameedtuples that are used to represent different types of search records.  This should provide
# a relatively standardized way to encapsulate database query results in a readable and easy to use fashion.  Ideally,
# these data structures will keep the interface to the results agnostic to the underlying method by which we query data
# whether it be raw SQL or an ORM like SQLAlchemy.


# Specimen search records will returned in this format as opposed to the raw list format that the lower level SQLAlchemy
# functions return.  This will ideally provide a standard record type regardless of the implementation.
SpecimenSearchRecord = namedtuple('SpecimenSearchRecord',
                                  [
                                      'identity',
                                      'catalog_number',
                                      'family',
                                      'genus',
                                      'collectors',
                                      'place_name',
                                      'species_epithet',
                                      'infra_rank',
                                      'infra_name',
                                      'identification_qualifier',
                                      'plant_id',
                                      'status',
                                      'county_district',
                                      'collectors_number',
                                      'collection_date',
                                      'locality',
                                      'determiner',
                                      'determination_history',
                                      'accompanying_collectors',
                                      'habitat',
                                  ])

SpecifySearchRecord = namedtuple('SpecifySearchRecord',
                                 [
                                      'catalog_number',
                                      'determination_history',
                                      'family',
                                      'genus',
                                      'genus2',
                                      'genus3',
                                      'collectors',
                                      'collectors_number',
                                      'collection_date',
                                      'locality',
                                      'accompanying_collectors',
                                      'species',
                                      'species2',
                                      'species3',
                                      'subspecies',
                                      'subspecies2',
                                      'subspecies3',
                                      'variety',
                                      'variety2',
                                      'variety3',
                                      'forma',
                                      'forma2',
                                      'forma3',
                                      'specimen_notes',
                                      'plant_id',
                                      'status',
                                      'county',
                                      'latitude',
                                      'longitude',
                                      'determiner1',
                                      'determiner2',
                                      'determiner3',
                                      'determination_year1',
                                      'determination_year2',
                                      'determination_year3',
                                      'confidence1',
                                      'confidence2',
                                      'confidence3',
                                      'remarks1',
                                      'remarks2',
                                      'remarks3',
                                      'habitat',
                                      'herbaria',
                                      'author',
                                  ])

FloraSearchRecord = namedtuple('FloraSearchRecord',
                               [
                                   'plant_id',
                                   'scientific_name',
                                   'c',
                                   'st',
                                   'w',
                                   'wet',
                                   'phys',
                                   'na',
                                   'family_name',
                                   'common_name'
                               ])

ImageRecord = namedtuple('ImageRecord',
                         [
                             'image_id',
                             'image_name',
                             'plant_id',
                             'caption',
                             'photographer',
                         ])
